import numpy as np
import matplotlib.pyplot as plt
#matplotlib inline

# Make sure that caffe is on the python path:
caffe_root = './'  # this file is expected to be in {caffe_root}/examples
import sys
sys.path.insert(0, caffe_root + 'python')

import caffe

plt.rcParams['figure.figsize'] = (10, 10)
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'

import os

#caffe.set_mode_cpu()
net = caffe.Net('examples/pascal/pascal_ae_depth_1_topology.prototxt',
                'examples/pascal/pascal_autoencoder_topology_iter_10000.caffemodel',
                caffe.TEST)
# net = caffe.Net('Homework2/Models/Definitions/Autogenerated/autoencoder_test.prototxt',
#                 'Homework2/Models/Binaries/autoencoder_iter_5000.caffemodel',
#                 caffe.TEST)

# input preprocessing: 'data' is the name of the input blob == net.inputs[0]
transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})
transformer.set_transpose('data', (2,0,1))
transformer.set_crop('data', True)
transformer.set_crop_rng(np.random.RandomState(123450))

# set net to batch size of 50
net.blobs['data'].reshape(50, 1, 28, 28)

test_image = caffe.io.load_image('Homework2/Data/VOC2007/JPEGImages/000023.jpg', color=False)
processed_test_image = transformer.preprocess('data', test_image)
processed_test_image = processed_test_image[1, :, :] # Just keep a single channel.

net.blobs['data'].data[...] = processed_test_image

#TODO: figure out the deprocess error thing
plt.imshow(np.squeeze(net.blobs['data'].data[0]))
plt.savefig('visualize/viz_results/pascal_ae_topology/input.png')

# CPU mode
net.forward()  # call once for allocation

# check the output data dimension for all layers
[(k, v.data.shape) for k, v in net.blobs.items()]

#check the parameter dimensions for each layer -- weight/filter
[(k, v[0].data.shape) for k, v in net.params.items()]

# take an array of shape (n, height, width) or (n, height, width, channels)
# and visualize each (height, width) thing in a grid of size approx. sqrt(n) by sqrt(n)
def vis_square(data, padsize=1, padval=0):
    data -= data.min()
    data /= data.max()
    # force the number of filters to be square
    n = int(np.ceil(np.sqrt(data.shape[0])))
    padding = ((0, n ** 2 - data.shape[0]), (0, padsize), (0, padsize)) + ((0, 0),) * (data.ndim - 3)
    data = np.pad(data, padding, mode='constant', constant_values=(padval, padval))
    # tile the filters into an image
    data = data.reshape((n, n) + data.shape[1:]).transpose((0, 2, 1, 3) + tuple(range(4, data.ndim + 1)))
    data = data.reshape((n * data.shape[1], n * data.shape[3]) + data.shape[4:])
    plt.imshow(data)


## encode1
# filters
filters = net.params['encode1'][0].data  # Bx10000
filters = np.reshape(filters, (-1, 28, 28))  # Bx900 --> Bx100x100
vis_square(filters)
plt.savefig('visualize/viz_results/pascal_ae_topology/encode1_filters.png')

# output
feat = net.blobs['encode1'].data[0]
feat = np.reshape(feat, (-1, 40, 25))  # B*1024 = Bx32x32
vis_square(feat, padval=0.5)
plt.savefig('visualize/viz_results/pascal_ae_topology/encode1_output.png')


## deencode1
# filters
filters = net.params['decode1'][0].data  # 10000x1024
filters_normal = np.reshape(filters, (784, 25, 40))  # 900x00 --> 900x20x20
vis_square(filters_normal)
plt.savefig('visualize/viz_results/pascal_ae_topology/decode1_filters.png')

# filters transposed (should be approximately similar to encode1 filters? not sure if true)
filters_transposed = filters.transpose()
filters_transposed = np.reshape(filters,(-1, 28, 28))
vis_square(filters_transposed)
plt.savefig('visualize/viz_results/pascal_ae_topology/decode1_filters_transposed.png')

# deencode1 output
feat = net.blobs['decode1'].data[0] #500
feat = np.reshape(feat, (-1, 28, 28))  # B*900 --> Bx10x10
vis_square(feat, padval=0.5)
plt.savefig('visualize/viz_results/pascal_ae_topology/decode1_output.png')