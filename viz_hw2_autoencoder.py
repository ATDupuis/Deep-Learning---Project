import numpy as np
import matplotlib.pyplot as plt
#matplotlib inline

# Make sure that caffe is on the python path:
caffe_root = './'  # this file is expected to be in {caffe_root}/examples
import sys
sys.path.insert(0, caffe_root + 'python')

import caffe

plt.rcParams['figure.figsize'] = (10, 10)
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'

import os

caffe.set_mode_cpu()
net = caffe.Net('Homework2/Models/Definitions/Autogenerated/autoencoder_test.prototxt',
                'Homework2/Models/Binaries/autoencoder_iter_5000.caffemodel',
                caffe.TEST)

# input preprocessing: 'data' is the name of the input blob == net.inputs[0]
transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})
transformer.set_transpose('data', (2,0,1))
transformer.set_crop('data', True)
transformer.set_crop_rng(np.random.RandomState(123450))

# set net to batch size of 50
net.blobs['data'].reshape(50, 1, 30, 30)

test_image = caffe.io.load_image('Homework2/Data/VOC2007/JPEGImages/000023.jpg', color=False)
processed_test_image = transformer.preprocess('data', test_image)
processed_test_image = processed_test_image[1, :, :] # Just keep a single channel.

net.blobs['data'].data[...] = processed_test_image

#TODO: figure out the deprocess error thing
plt.imshow(np.squeeze(net.blobs['data'].data[0]))
plt.savefig('visualize/viz_results/ae/hw2/input.png')

# CPU mode
net.forward()  # call once for allocation

# check the output data dimension for all layers
[(k, v.data.shape) for k, v in net.blobs.items()]
# ('data', (100, 1, 28, 28))
# ('data_data_0_split_0', (100, 1, 28, 28))
# ('data_data_0_split_1', (100, 1, 28, 28))
# ('flatdata', (100, 784))
# ('flatdata_flatdata_0_split_0', (100, 784))
# ('flatdata_flatdata_0_split_1', (100, 784))
# ('encode1', (100, 1000))
# ('encode1neuron', (100, 1000))
# ('encode2', (100, 500))
# ('encode2neuron', (100, 500))
# ('encode3', (100, 250))
# ('encode3neuron', (100, 250))
# ('encode4', (100, 30))
# ('decode4', (100, 250))
# ('decode4neuron', (100, 250))
# ('decode3', (100, 500))
# ('decode3neuron', (100, 500))
# ('decode2', (100, 1000))
# ('decode2neuron', (100, 1000))
# ('decode1', (100, 784))
# ('decode1_decode1_0_split_0', (100, 784))
# ('decode1_decode1_0_split_1', (100, 784))
# ('cross_entropy_loss', ())
# ('decode1neuron', (100, 784))
# ('l2_error', ())


#check the parameter dimensions for each layer -- weight/filter
[(k, v[0].data.shape) for k, v in net.params.items()]
# ('encode1', (1000, 784))
# ('encode2', (500, 1000))
# ('encode3', (250, 500))
# ('encode4', (30, 250))
# ('decode4', (250, 30))
# ('decode3', (500, 250))
# ('decode2', (1000, 500))
# ('decode1', (784, 1000))


# take an array of shape (n, height, width) or (n, height, width, channels)
# and visualize each (height, width) thing in a grid of size approx. sqrt(n) by sqrt(n)
def vis_square(data, padsize=1, padval=0):
    data -= data.min()
    data /= data.max()

    # force the number of filters to be square
    n = int(np.ceil(np.sqrt(data.shape[0])))
    padding = ((0, n ** 2 - data.shape[0]), (0, padsize), (0, padsize)) + ((0, 0),) * (data.ndim - 3)
    data = np.pad(data, padding, mode='constant', constant_values=(padval, padval))

    # tile the filters into an image
    data = data.reshape((n, n) + data.shape[1:]).transpose((0, 2, 1, 3) + tuple(range(4, data.ndim + 1)))
    data = data.reshape((n * data.shape[1], n * data.shape[3]) + data.shape[4:])

    plt.imshow(data)


## compressed_ip
# filters
filters = net.params['compressed_ip'][0].data  # Bx900
filters = np.reshape(filters, (-1, 30, 30))  # Bx900 --> Bx30x30
vis_square(filters)
plt.savefig('visualize/viz_results/ae/hw2/compressed_ip_filters.png')

# output
feat = net.blobs['compressed_ip'].data[0]
feat = np.reshape(feat, (-1, 20, 20))  # B*400 = Bx10x10
vis_square(feat, padval=0.5)
plt.savefig('visualize/viz_results/ae/hw2/compressed_ip_output.png')


## decompressed_ip
# filters
filters = net.params['decompressed_ip'][0].data  # 900x400
filters_normal = np.reshape(filters, (-1, 20, 20))  # 900x00 --> 900x20x20
vis_square(filters_normal)
plt.savefig('visualize/viz_results/ae/hw2/decompressed_ip_filters.png')

# filters transposed (should be approximately similar to compressed_ip filters? not sure if true)
filters_transposed = filters.transpose()
filters_transposed = np.reshape(filters,(-1, 30, 30))
vis_square(filters_transposed)
plt.savefig('visualize/viz_results/ae/hw2/decompressed_ip_filters_transposed.png')

# decompressed_ip output
feat = net.blobs['decompressed_ip'].data[0] #500
feat = np.reshape(feat, (-1, 30, 30))  # B*900 --> Bx10x10
vis_square(feat, padval=0.5)
plt.savefig('visualize/viz_results/ae/hw2/decompressed_ip_output.png')